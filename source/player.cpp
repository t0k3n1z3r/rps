/**
********************************************************************************
* @file         player.cpp
* @brief        RPS player class implementation
* @author       Maksym Koshel (maks.koshel@gmail.com)
* @date         Sep 02, 2017
********************************************************************************
*/

// Include header
#include "player.h"

// System includes
#include <iostream>
#include <stdexcept>

// Local includes
#include "input.h"

/*
********************************************************************************
*
********************************************************************************
*/
Player::Player()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
Player::~Player()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
Machine::Machine() : Player()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
Machine::~Machine()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
ARTIFACT Machine::gesture(void) const
{
    /**
    ****************************************************************************
    * @note     This imlementation follows the simplest strategy which is random
    *           gesture
    ****************************************************************************
    */
    return static_cast<ARTIFACT>(rand() % 3);
}

/*
********************************************************************************
*
********************************************************************************
*/
Human::Human() : Player()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
Human::~Human()
{

}

/*
********************************************************************************
*
********************************************************************************
*/
ARTIFACT Human::gesture(void) const
{
    int tries = c_not;
    int g = -1;

    while(tries-- > 0)
    {
        std::string user_input;
        std::cout << "Choose one of the following gestures "
                 "[0 - Rock, 1 - Scisors, 2 - Paper]" << std::endl;
        std::cin >> user_input;
        if (user_input == "q")
        {
            throw std::runtime_error("User entered 'q'"); 
        }

        g = uifs(user_input);
        if (g >= 0 && g < 3)
        {
            break;
        }

        std::cerr << "Your input is '" << user_input
                  << "' where [0 - Rock, 1 - Scisors, 2 - Paper] is allowed. "
                  << "Tries left: " << tries
                  << std::endl;
    }

    if (g < 0)
        throw std::runtime_error("User can't provide valid input");

    return static_cast<ARTIFACT>(g);
}
